{:min-bb-version "0.9.162"
 :paths ["script" "build"]
 :deps {org.clojure/data.zip {:mvn/version "1.0.0"}
        io.aviso/pretty {:mvn/version "1.3"}
        dev.nubank/docopt {:mvn/version "0.6.1-fix7"}
        doric/doric {:mvn/version "0.9.0"}
        version-clj/version-clj {:mvn/version "2.0.2"}
        lread/status-line {:git/url "https://github.com/lread/status-line.git"
                           :sha "cf44c15f30ea3867227fa61ceb823e5e942c707f"}
        etaoin/etaoin {:mvn/version "1.0.38"}}
 :tasks {;; setup
         :requires ([clojure.string :as string]
                    [lread.status-line :as status])
         :enter (let [{:keys [name]} (current-task)] (status/line :head "TASK %s %s" name (string/join " " *command-line-args*)))
         :leave (let [{:keys [name]} (current-task)] (status/line :detail "\nTASK %s done." name))
         ;; commands
         apply-import-vars {:task apply-import-vars/-main :doc "(check|gen-code) - export APIs statically from templates"}
         lint              {:task lint/-main              :doc "[--rebuild] lint source code using clj-kondo, eastwood, whitespace-linter"}
         -lint-kondo       {:task lint-kondo/-main        :doc "[--rebuild]"}
         -lint-eastwood    {:task lint-eastwood/-main}
         -lint-whitespace  {:task lint-whitespace/-main}
         test-clj          {:task test-clj/-main          :doc "[--clojure-version (1.8|1.9|1.10|1.11)]"}
         test-cljs         {:task test-cljs/-main         :doc "use --help for args"}
         test-shadow-cljs  {:task test-shadow-cljs/-main}
         test-native       {:task test-native/-main       :doc "run rewrite-clj and tests after both compiled with GraalVM native-image"}
         test-native-sci   {:task test-native-sci/-main   :doc "interpret rewrite-clj tests via sci from rewrite-clj native image"}
         test-jvm-sci      {:task test-jvm-sci/-main      :doc "JVM only sanity test for test-native-sci"}
         test-clj-watch    {:task test-clj-watch/-main    :doc "[kaocha args]"}
         test-cljs-watch   {:task test-cljs-watch/-main   :doc "watch cljs test with fighweel main"}
         test-coverage     {:task test-coverage/-main     :doc "generate code coverage reports for Clojure tests"}
         test-doc          {:task test-doc/-main          :doc "test doc code blocks"}
         test-libs         {:task test-libs/-main         :doc "(list|run|outdated) - verify that libs using rewrite-clj* work with current rewrite-clj"}
         outdated          {:task outdated/-main          :doc "report on outdated Clojure and npm dependencies"}
         doc-api-diffs     {:task doc-api-diffs/-main     :doc "generate diff docs for rewrite-clj* APIs"}
         doc-update-readme {:task doc-update-readme/-main :doc "honour our contributors in README"}
         cljdoc-preview    {:task cljdoc-preview/-main    :doc "preview what docs will look like on cljdoc, use --help for args"}
         ci-unit-tests     {:task ci-unit-tests/-main     :doc "run/list continuous integration unit tests, use --help for args"}
         ci-release        {:task ci-release/-main        :doc "release tasks, use --help for args"}}}
