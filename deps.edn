{:paths ["src" "resources"]

 :deps {org.clojure/clojure {:mvn/version "1.8.0"}
        org.clojure/tools.reader {:mvn/version "1.5.2"}}

 :aliases {;; we use babashka/neil for project attributes
           ;; publish workflow references these values (and automatically bumps patch component of version)
           :neil {:project {:version "1.2.50" ;; describes last release and is template for next release
                            :name rewrite-clj/rewrite-clj
                            ;; not neilisms - could potentially conflict with new neilisms
                            :github-coords clj-commons/rewrite-clj}}

           ;;
           ;; Clojure versions we support
           ;;
           :1.8 {:override-deps {org.clojure/clojure {:mvn/version "1.8.0"}}}
           :1.9 {:override-deps {org.clojure/clojure {:mvn/version "1.9.0"}}}
           :1.10 {:override-deps {org.clojure/clojure {:mvn/version "1.10.3"}}}
           :1.11 {:override-deps {org.clojure/clojure {:mvn/version "1.11.4"}}}
           :1.12 {:override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}}

           ;;
           ;; ClojureScript version we test with (and support)
           ;;
           :cljs {:extra-deps {org.clojure/clojurescript {:mvn/version "1.12.42"}}}

           ;;
           ;; REPL to support bb dev-jvm & dev-cljs tasks, see script/dev_repl.clj
           ;;
           :nrepl
           {:extra-deps {nrepl/nrepl {:mvn/version "1.3.1"}
                         cider/cider-nrepl {:mvn/version "0.57.0"}}
            :jvm-opts ["-XX:-OmitStackTraceInFastThrow"]}

           :flowstorm
           {;; for disabling the official compiler
            :classpath-overrides {org.clojure/clojure nil}
            :extra-deps {com.github.flow-storm/clojure {:mvn/version "1.12.2"}
                         com.github.flow-storm/flow-storm-dbg {:mvn/version "4.5.1"}}
            :jvm-opts ["-Dclojure.storm.instrumentEnable=true"]}

           :nrepl/jvm
           {:extra-deps {refactor-nrepl/refactor-nrepl {:mvn/version "3.11.0"}}
            :jvm-opts ["-Djdk.attach.allowAttachSelf"]
            :main-opts  ["-m" "nrepl.cmdline"
                         "--middleware" "[refactor-nrepl.middleware/wrap-refactor cider.nrepl/cider-middleware]"
                         "-i"]}

           :nrepl/cljs ;; note shadow-cljs does its own thing, this is for a REPL with
                       ;; support for plain old ClojureScript
           {:extra-deps {cider/piggieback {:mvn/version "0.6.1"}}
            :jvm-opts ["-Djdk.attach.allowAttachSelf"]
            :main-opts ["-m" "nrepl.cmdline"
                        "--middleware" "[cider.nrepl/cider-middleware cider.piggieback/wrap-cljs-repl]"
                        "-i"]}

           ;;
           ;; Linting
           ;;
           :lint-cache {:replace-paths ["src"]} ;; when building classpath we want to exclude resources
                                                ;; so we do not pick up our own clj-kondo config exports
           :clj-kondo {:extra-deps {clj-kondo/clj-kondo {:mvn/version "2025.09.19"}}
                       :override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}
                       :main-opts ["-m" "clj-kondo.main"]}

           :eastwood {:extra-deps {jonase/eastwood {:mvn/version "1.4.3"}}
                      :main-opts ["-m" "eastwood.lint" {:source-paths ["src"]
                                                        :test-paths ["test"]
                                                        :add-linters [:performance]
                                                        ;; not too worried about eastwood finding deprecation usages,
                                                        ;; we rely on clj-kondo for that
                                                        :ignored-faults {:deprecations {rewrite-clj.regression-test true
                                                                                        rewrite-clj.zip.whitespace-test true
                                                                                        rewrite-clj.zip-test true
                                                                                        rewrite-clj.paredit-test true}}}]}

           ;;
           ;; Test support
           ;;

           :test-common {:extra-deps {org.clojure/test.check {:mvn/version "1.1.1"}}
                         :extra-paths ["test"]}

           :test-isolated {:extra-paths ["test-isolated"]}

           ;; document block testing
           :test-doc-blocks {:replace-deps {org.clojure/clojure {:mvn/version "1.12.2"}
                                            com.github.lread/test-doc-blocks  {:mvn/version "1.2.21"}}
                             :replace-paths []
                             :ns-default lread.test-doc-blocks
                             :exec-args {:docs ["doc/01-user-guide.adoc"
                                                "doc/design/01-merging-rewrite-clj-and-rewrite-cljs.adoc"
                                                "doc/design/namespaced-elements.adoc"
                                                "src/rewrite_clj/node.cljc"]}}

           :test-docs {:override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}
                       :extra-paths ["target/test-doc-blocks/test"]}

           ;; kaocha for testing clojure versions>= v1.9
           :kaocha {:extra-deps {lambdaisland/kaocha {:mvn/version "1.91.1392"}
                                 lambdaisland/kaocha-junit-xml {:mvn/version "1.17.101"}
                                 lambdaisland/kaocha-cloverage {:mvn/version "1.1.89"}}
                    :main-opts ["-m" "kaocha.runner"]}

           ;; cognitect test-runner for testing clojure < v1.9
           ;; (we prefer kaocha but it requires a min Clojure version of 1.9)
           :clj-test-runner {:extra-deps {io.github.cognitect-labs/test-runner
                                          {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
                             :main-opts ["-m" "cognitect.test-runner"]}

           ;; figwheel for clojurescript testing during dev
           :fig-test {:extra-deps {com.bhauman/figwheel-main {:mvn/version "0.2.20"}}
                      :override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}
                      :extra-paths ["target" "test"]
                      :main-opts ["-m" "figwheel.main" "-b" "fig" "-r"]}

           :cljs-test {:extra-deps {olical/cljs-test-runner {:mvn/version "3.8.1"}}
                       :extra-paths ["test"]
                       :main-opts ["-m" "cljs-test-runner.main"]}

           ;; planck for Self-Hosted ClojureScript
           :planck-test {:extra-paths ["target/cljsbuild/test/planck-none/gen"]}

           ;;
           ;; General script deps
           ;;
           :script {:extra-paths ["script"]
                    :override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}
                    :extra-deps {org.clojure/tools.namespace {:mvn/version "1.5.0"}
                                 cli-matic/cli-matic {:mvn/version "0.5.4"}}}

           :apply-import-vars {:override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}
                               :extra-deps {metosin/malli {:mvn/version "0.19.1"}
                                            io.aviso/pretty {:mvn/version "1.4.4"}}
                               :ns-default lread.apply-import-vars}

           ;;
           ;; Running tests under Graal
           ;;
           ;; We have two main Graal scenarios:
           ;; graal:sci-test - interpret tests via sci over natively compiled rewrite-clj
           ;; graal:native-test - natively compile src and tests and run

           :graal {:override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}
                   :extra-deps {com.github.clj-easy/graal-build-time {:mvn/version "1.0.5"}}}

           :sci-test {:extra-paths ["target/generated/sci-test/src"]
                      :extra-deps {lread/sci-test
                                   #_ {:local/root "/home/lee/proj/oss/lread/sci-test"}
                                   {:git/url "https://github.com/lread/sci-test.git"
                                    :sha "e7130da5b29c294d9044c4f4d48a282991f8a50f" }}}

           :native-test {:extra-paths ["target/generated/graal"]}

           ;; usage -M:sci-test:gen-reflection
           :gen-reflection {:main-opts ["-m" "sci-test.generate-reflection-file"]}

           ;;
           ;; Deployment
           ;;
           :build {:deps {io.github.clojure/tools.build {:mvn/version "0.10.10"}}
                   :extra-paths ["src" "build"]
                   :ns-default build}

           ;; keep deploy deps separate from build deps; this avoids `bb download-deps` failures on windows
           ;; when downloading jackson (and other conflicting) deps.
           :deploy {:extra-deps {slipset/deps-deploy {:mvn/version "0.2.2"}}}

           ;;
           ;; Maintenance support
           ;;
           :outdated {:extra-deps {com.github.liquidz/antq {:mvn/version "2.11.1276"}
                                   org.slf4j/slf4j-simple {:mvn/version "2.0.17"} ;; to rid ourselves of logger warnings
                                   }
                      :override-deps {org.clojure/clojure {:mvn/version "1.12.2"}}
                      :main-opts ["-m" "antq.core"
                                  "--ignore-locals"
                                  "--exclude=lambdaisland/kaocha@1.88.1376" ;; breaks clojure 1.9 compat, let's wait to see if that was intentional
                                  "--exclude=lambdaisland/kaocha@1.0.829" ;; https://github.com/lambdaisland/kaocha/issues/208
                                  "--exclude=com.bhauman/figwheel-main@0.2.15" ;; deployment was botched, some components missing
                                  "--exclude=org.clojure/clojurescript@1.11.121" ;; no evidence yet that this is an official release
                                  "--exclude=technomancy/leiningen@2.11.0" ;; exclude for refactor-nrepl lib test
                                  "--exclude=technomancy/leiningen@2.11.1" ;; exclude for refactor-nrepl lib test
                                  ]}}}
